# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VirtualMachineConfiguration(Model):
    """The configuration for Compute Nodes in a Pool based on the Azure Virtual
    Machines infrastructure.

    All required parameters must be populated in order to send to Azure.

    :param image_reference: Required. A reference to the Azure Virtual
     Machines Marketplace Image or the custom Virtual Machine Image to use.
    :type image_reference: ~azure.batch.models.ImageReference
    :param node_agent_sku_id: Required. The SKU of the Batch Compute Node
     agent to be provisioned on Compute Nodes in the Pool. The Batch Compute
     Node agent is a program that runs on each Compute Node in the Pool, and
     provides the command-and-control interface between the Compute Node and
     the Batch service. There are different implementations of the Compute Node
     agent, known as SKUs, for different operating systems. You must specify a
     Compute Node agent SKU which matches the selected Image reference. To get
     the list of supported Compute Node agent SKUs along with their list of
     verified Image references, see the 'List supported Compute Node agent
     SKUs' operation.
    :type node_agent_sku_id: str
    :param windows_configuration: Windows operating system settings on the
     virtual machine. This property must not be specified if the imageReference
     property specifies a Linux OS Image.
    :type windows_configuration: ~azure.batch.models.WindowsConfiguration
    :param data_disks: The configuration for data disks attached to the
     Compute Nodes in the Pool. This property must be specified if the Compute
     Nodes in the Pool need to have empty data disks attached to them. This
     cannot be updated. Each Compute Node gets its own disk (the disk is not a
     file share). Existing disks cannot be attached, each attached disk is
     empty. When the Compute Node is removed from the Pool, the disk and all
     data associated with it is also deleted. The disk is not formatted after
     being attached, it must be formatted before use - for more information see
     https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux
     and
     https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
    :type data_disks: list[~azure.batch.models.DataDisk]
    :param license_type: The type of on-premises license to be used when
     deploying the operating system. This only applies to Images that contain
     the Windows operating system, and should only be used when you hold valid
     on-premises licenses for the Compute Nodes which will be deployed. If
     omitted, no on-premises licensing discount is applied. Values are:
     Windows_Server - The on-premises license is for Windows Server.
     Windows_Client - The on-premises license is for Windows Client.
    :type license_type: str
    :param container_configuration: The container configuration for the Pool.
     If specified, setup is performed on each Compute Node in the Pool to allow
     Tasks to run in containers. All regular Tasks and Job manager Tasks run on
     this Pool must specify the containerSettings property, and all other Tasks
     may specify it.
    :type container_configuration: ~azure.batch.models.ContainerConfiguration
    """

    _validation = {
        'image_reference': {'required': True},
        'node_agent_sku_id': {'required': True},
    }

    _attribute_map = {
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'node_agent_sku_id': {'key': 'nodeAgentSKUId', 'type': 'str'},
        'windows_configuration': {'key': 'windowsConfiguration', 'type': 'WindowsConfiguration'},
        'data_disks': {'key': 'dataDisks', 'type': '[DataDisk]'},
        'license_type': {'key': 'licenseType', 'type': 'str'},
        'container_configuration': {'key': 'containerConfiguration', 'type': 'ContainerConfiguration'},
    }

    def __init__(self, **kwargs):
        super(VirtualMachineConfiguration, self).__init__(**kwargs)
        self.image_reference = kwargs.get('image_reference', None)
        self.node_agent_sku_id = kwargs.get('node_agent_sku_id', None)
        self.windows_configuration = kwargs.get('windows_configuration', None)
        self.data_disks = kwargs.get('data_disks', None)
        self.license_type = kwargs.get('license_type', None)
        self.container_configuration = kwargs.get('container_configuration', None)
