# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration

from azure.profiles import KnownProfiles, ProfileDefinition
from azure.profiles.multiapiclient import MultiApiClientMixin

class BatchServiceClientConfiguration(AzureConfiguration):
    """Configuration for BatchServiceClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param batch_url: The base URL for all Azure Batch service requests.
    :type batch_url: str
    """

    def __init__(
            self, credentials, batch_url):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if batch_url is None:
            raise ValueError("Parameter 'batch_url' must not be None.")
        base_url = '{batchUrl}'

        super(BatchServiceClientConfiguration, self).__init__(base_url)
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.batch_url = batch_url

class BatchServiceClient(MultiApiClientMixin, SDKClient):
    """Compute Client

    This ready contains multiple API versions, to help you deal with all Azure clouds
    (Azure Stack, Azure Government, Azure China, etc.).
    By default, uses latest API version available on public Azure.
    For production, you should stick a particular api-version and/or profile.
    The profile sets a mapping between the operation group and an API version.
    The api-version parameter sets the default API version if the operation
    group is not described in the profile.

    :ivar config: Configuration for client.
    :vartype config: ComputeManagementClientConfiguration

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: Subscription credentials which uniquely identify
     Microsoft Azure subscription. The subscription ID forms part of the URI
     for every service call.
    :type subscription_id: str
    :param str api_version: API version to use if no profile is provided, or if
     missing in profile.
    :param str base_url: Service URL
    :param profile: A profile definition, from KnownProfiles to dict.
    :type profile: azure.profiles.KnownProfiles
    """

    DEFAULT_API_VERSION = '2019-08-01.10.0'
    _PROFILE_TAG = "azure.batch.ComputeManagementClient"
    LATEST_PROFILE = ProfileDefinition({
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
        }},
        _PROFILE_TAG + " latest"
    )

    def __init__(
            self, credentials, batch_url, api_version=None, profile=KnownProfiles.default):

        self.config = BatchServiceClientConfiguration(credentials, batch_url)
        super(BatchServiceClient, self).__init__(self.config.credentials, self.config)
        self.api_version = '2019-08-01.10.0'

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=None):
        """Module depends on the API version:
        """
        api_version = api_version if api_version else cls.DEFAULT_API_VERSION
        if api_version == '2018-08-01.7.0':
            from .v2018_08_01 import models
            return models
        elif api_version == '2018-12-01.8.0':
            from .v2018_12_01 import models
            return models
        elif api_version == '2019-06-01.9.0':
            from .v2019_06_01 import models
            return models
        elif api_version == '2019-08-01.10.0':
            from .v2019_08_01 import models
            return models
        raise NotImplementedError("APIVersion {} is not available".format(api_version))

    @property
    def application(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import ApplicationOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import ApplicationOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import ApplicationOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import ApplicationOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return ApplicationOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def pool(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import PoolOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import PoolOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import PoolOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import PoolOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return PoolOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def account(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import AccountOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import AccountOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import AccountOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import AccountOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return AccountOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def job(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import JobOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import JobOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import JobOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import JobOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return JobOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def certificate(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import CertificateOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import CertificateOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import CertificateOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import CertificateOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return CertificateOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def file(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import FileOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import FileOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import FileOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import FileOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return FileOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def job_schedule(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import JobScheduleOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import JobScheduleOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import JobScheduleOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import JobScheduleOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return JobScheduleOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def task(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import TaskOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import TaskOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import TaskOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import TaskOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return TaskOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))

    @property
    def compute_node(self):
        """Instance depends on the API version
        """
        if self.api_version == '2018-08-01.7.0':
            from .v2018_08_01.operations import ComputeNodeOperations
        elif self.api_version == '2018-12-01.8.0':
            from .v2018_12_01.operations import ComputeNodeOperations
        elif self.api_version == '2019-06-01.9.0':
            from .v2019_06_01.operations import ComputeNodeOperations
        elif self.api_version == '2019-08-01.10.0':
            from .v2019_08_01.operations import ComputeNodeOperations
        else:
            raise NotImplementedError("APIVersion {} is not available".format(self.api_version))
        return ComputeNodeOperations(
            self._client, self.config, Serializer(self._models_dict(self.api_version)), Deserializer(self._models_dict(self.api_version)))
