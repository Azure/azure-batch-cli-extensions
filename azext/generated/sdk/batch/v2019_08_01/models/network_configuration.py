# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class NetworkConfiguration(Model):
    """The network configuration for a Pool.

    :param subnet_id: The ARM resource identifier of the virtual network
     subnet which the Compute Nodes of the Pool will join. This is of the form
     /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
     The virtual network must be in the same region and subscription as the
     Azure Batch Account. The specified subnet should have enough free IP
     addresses to accommodate the number of Compute Nodes in the Pool. If the
     subnet doesn't have enough free IP addresses, the Pool will partially
     allocate Nodes, and a resize error will occur. The 'MicrosoftAzureBatch'
     service principal must have the 'Classic Virtual Machine Contributor'
     Role-Based Access Control (RBAC) role for the specified VNet. The
     specified subnet must allow communication from the Azure Batch service to
     be able to schedule Tasks on the Nodes. This can be verified by checking
     if the specified VNet has any associated Network Security Groups (NSG). If
     communication to the Nodes in the specified subnet is denied by an NSG,
     then the Batch service will set the state of the Compute Nodes to
     unusable. For Pools created with virtualMachineConfiguration only ARM
     virtual networks ('Microsoft.Network/virtualNetworks') are supported, but
     for Pools created with cloudServiceConfiguration both ARM and classic
     virtual networks are supported. If the specified VNet has any associated
     Network Security Groups (NSG), then a few reserved system ports must be
     enabled for inbound communication. For Pools created with a virtual
     machine configuration, enable ports 29876 and 29877, as well as port 22
     for Linux and port 3389 for Windows. For Pools created with a cloud
     service configuration, enable ports 10100, 20100, and 30100. Also enable
     outbound connections to Azure Storage on port 443. For more details see:
     https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
    :type subnet_id: str
    :param dynamic_vnet_assignment_scope: The scope of dynamic vnet
     assignment. Possible values include: 'none', 'job'
    :type dynamic_vnet_assignment_scope: str or
     ~azure.batch.models.DynamicVNetAssignmentScope
    :param endpoint_configuration: The configuration for endpoints on Compute
     Nodes in the Batch Pool. Pool endpoint configuration is only supported on
     Pools with the virtualMachineConfiguration property.
    :type endpoint_configuration:
     ~azure.batch.models.PoolEndpointConfiguration
    :param public_ips: The list of public IPs which the Batch service will use
     when provisioning Compute Nodes. The number of IPs specified here limits
     the maximum size of the Pool - 50 dedicated nodes or 20 low-priority nodes
     can be allocated for each public IP. For example, a pool needing 150
     dedicated VMs would need at least 3 public IPs specified. Each element of
     this collection is of the form:
     /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
    :type public_ips: list[str]
    """

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'dynamic_vnet_assignment_scope': {'key': 'dynamicVNetAssignmentScope', 'type': 'DynamicVNetAssignmentScope'},
        'endpoint_configuration': {'key': 'endpointConfiguration', 'type': 'PoolEndpointConfiguration'},
        'public_ips': {'key': 'publicIPs', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(NetworkConfiguration, self).__init__(**kwargs)
        self.subnet_id = kwargs.get('subnet_id', None)
        self.dynamic_vnet_assignment_scope = kwargs.get('dynamic_vnet_assignment_scope', None)
        self.endpoint_configuration = kwargs.get('endpoint_configuration', None)
        self.public_ips = kwargs.get('public_ips', None)
