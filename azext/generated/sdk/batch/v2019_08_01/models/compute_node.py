# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ComputeNode(Model):
    """A Compute Node in the Batch service.

    :param id: The ID of the Compute Node. Every Compute Node that is added to
     a Pool is assigned a unique ID. Whenever a Compute Node is removed from a
     Pool, all of its local files are deleted, and the ID is reclaimed and
     could be reused for new Compute Nodes.
    :type id: str
    :param url: The URL of the Compute Node.
    :type url: str
    :param state: The current state of the Compute Node. The low-priority
     Compute Node has been preempted. Tasks which were running on the Compute
     Node when it was preempted will be rescheduled when another Compute Node
     becomes available. Possible values include: 'idle', 'rebooting',
     'reimaging', 'running', 'unusable', 'creating', 'starting',
     'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool',
     'offline', 'preempted'
    :type state: str or ~azure.batch.models.ComputeNodeState
    :param scheduling_state: Whether the Compute Node is available for Task
     scheduling. Possible values include: 'enabled', 'disabled'
    :type scheduling_state: str or ~azure.batch.models.SchedulingState
    :param state_transition_time: The time at which the Compute Node entered
     its current state.
    :type state_transition_time: datetime
    :param last_boot_time: The last time at which the Compute Node was
     started. This property may not be present if the Compute Node state is
     unusable.
    :type last_boot_time: datetime
    :param allocation_time: The time at which this Compute Node was allocated
     to the Pool. This is the time when the Compute Node was initially
     allocated and doesn't change once set. It is not updated when the Compute
     Node is service healed or preempted.
    :type allocation_time: datetime
    :param ip_address: The IP address that other Nodes can use to communicate
     with this Compute Node. Every Compute Node that is added to a Pool is
     assigned a unique IP address. Whenever a Compute Node is removed from a
     Pool, all of its local files are deleted, and the IP address is reclaimed
     and could be reused for new Compute Nodes.
    :type ip_address: str
    :param affinity_id: An identifier which can be passed when adding a Task
     to request that the Task be scheduled on this Compute Node. Note that this
     is just a soft affinity. If the target Compute Node is busy or unavailable
     at the time the Task is scheduled, then the Task will be scheduled
     elsewhere.
    :type affinity_id: str
    :param vm_size: The size of the virtual machine hosting the Compute Node.
     For information about available sizes of virtual machines in Pools, see
     Choose a VM size for Compute Nodes in an Azure Batch Pool
     (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
    :type vm_size: str
    :param total_tasks_run: The total number of Job Tasks completed on the
     Compute Node. This includes Job Manager Tasks and normal Tasks, but not
     Job Preparation, Job Release or Start Tasks.
    :type total_tasks_run: int
    :param running_tasks_count: The total number of currently running Job
     Tasks on the Compute Node. This includes Job Manager Tasks and normal
     Tasks, but not Job Preparation, Job Release or Start Tasks.
    :type running_tasks_count: int
    :param total_tasks_succeeded: The total number of Job Tasks which
     completed successfully (with exitCode 0) on the Compute Node. This
     includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job
     Release or Start Tasks.
    :type total_tasks_succeeded: int
    :param recent_tasks: A list of Tasks whose state has recently changed.
     This property is present only if at least one Task has run on this Compute
     Node since it was assigned to the Pool.
    :type recent_tasks: list[~azure.batch.models.TaskInformation]
    :param start_task: The Task specified to run on the Compute Node as it
     joins the Pool.
    :type start_task: ~azure.batch.models.StartTask
    :param start_task_info: Runtime information about the execution of the
     StartTask on the Compute Node.
    :type start_task_info: ~azure.batch.models.StartTaskInformation
    :param certificate_references: The list of Certificates installed on the
     Compute Node. For Windows Nodes, the Batch service installs the
     Certificates to the specified Certificate store and location. For Linux
     Compute Nodes, the Certificates are stored in a directory inside the Task
     working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is
     supplied to the Task to query for this location. For Certificates with
     visibility of 'remoteUser', a 'certs' directory is created in the user's
     home directory (e.g., /home/{user-name}/certs) and Certificates are placed
     in that directory.
    :type certificate_references:
     list[~azure.batch.models.CertificateReference]
    :param errors: The list of errors that are currently being encountered by
     the Compute Node.
    :type errors: list[~azure.batch.models.ComputeNodeError]
    :param is_dedicated: Whether this Compute Node is a dedicated Compute
     Node. If false, the Compute Node is a low-priority Compute Node.
    :type is_dedicated: bool
    :param endpoint_configuration: The endpoint configuration for the Compute
     Node.
    :type endpoint_configuration:
     ~azure.batch.models.ComputeNodeEndpointConfiguration
    :param node_agent_info: Information about the Compute Node agent version
     and the time the Compute Node upgraded to a new version.
    :type node_agent_info: ~azure.batch.models.NodeAgentInformation
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'state': {'key': 'state', 'type': 'ComputeNodeState'},
        'scheduling_state': {'key': 'schedulingState', 'type': 'SchedulingState'},
        'state_transition_time': {'key': 'stateTransitionTime', 'type': 'iso-8601'},
        'last_boot_time': {'key': 'lastBootTime', 'type': 'iso-8601'},
        'allocation_time': {'key': 'allocationTime', 'type': 'iso-8601'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'affinity_id': {'key': 'affinityId', 'type': 'str'},
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'total_tasks_run': {'key': 'totalTasksRun', 'type': 'int'},
        'running_tasks_count': {'key': 'runningTasksCount', 'type': 'int'},
        'total_tasks_succeeded': {'key': 'totalTasksSucceeded', 'type': 'int'},
        'recent_tasks': {'key': 'recentTasks', 'type': '[TaskInformation]'},
        'start_task': {'key': 'startTask', 'type': 'StartTask'},
        'start_task_info': {'key': 'startTaskInfo', 'type': 'StartTaskInformation'},
        'certificate_references': {'key': 'certificateReferences', 'type': '[CertificateReference]'},
        'errors': {'key': 'errors', 'type': '[ComputeNodeError]'},
        'is_dedicated': {'key': 'isDedicated', 'type': 'bool'},
        'endpoint_configuration': {'key': 'endpointConfiguration', 'type': 'ComputeNodeEndpointConfiguration'},
        'node_agent_info': {'key': 'nodeAgentInfo', 'type': 'NodeAgentInformation'},
    }

    def __init__(self, **kwargs):
        super(ComputeNode, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.url = kwargs.get('url', None)
        self.state = kwargs.get('state', None)
        self.scheduling_state = kwargs.get('scheduling_state', None)
        self.state_transition_time = kwargs.get('state_transition_time', None)
        self.last_boot_time = kwargs.get('last_boot_time', None)
        self.allocation_time = kwargs.get('allocation_time', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.affinity_id = kwargs.get('affinity_id', None)
        self.vm_size = kwargs.get('vm_size', None)
        self.total_tasks_run = kwargs.get('total_tasks_run', None)
        self.running_tasks_count = kwargs.get('running_tasks_count', None)
        self.total_tasks_succeeded = kwargs.get('total_tasks_succeeded', None)
        self.recent_tasks = kwargs.get('recent_tasks', None)
        self.start_task = kwargs.get('start_task', None)
        self.start_task_info = kwargs.get('start_task_info', None)
        self.certificate_references = kwargs.get('certificate_references', None)
        self.errors = kwargs.get('errors', None)
        self.is_dedicated = kwargs.get('is_dedicated', None)
        self.endpoint_configuration = kwargs.get('endpoint_configuration', None)
        self.node_agent_info = kwargs.get('node_agent_info', None)
